大致流程
借鉴博客https://www.cnblogs.com/xianyulaodi/p/6547807.html

输入网址(url)->dns(域名系统)解析->建立tcp连接->客户端发送http请求
->服务器处理请求->服务器响应请求->浏览器展示html->浏览器发送其他html中的资源
-----------------------------------------------------------------------------
http://47.107.80.17:8080/take-out/jsp/test.html

url是什么？
统一资源定位符，简单点说就是指出某一资源信息所在的位置和存取方式。
组成元素分解：
传输协议：http 类似的协议还有https,ftp,etc
主机或主机名：	
域名：	47.107.80.17   IP地址作为域名使用
端口:	8080
路径：	take-out/jsp/test.html
后面也可以接参数：？连接  &作为分割符 
--------------------------------------------------------------------
域名解析(浏览器首先解析域名)：浏览器查找域名的ip地址
先查看本地硬盘的hosts文件中是否存在这个域名对应的规则，
如果有就直接使用hosts文件中的对应的ip地址。
如果没有，浏览器会向本地dns服务器发送请求,dns服务器首先会查询其缓存记录，
如果缓存中存在这条记录，直接返回结果，如果没有，就会向dns根服务器进行查询。
根服务器并不会记录域名和ip的对应关系，而是告诉本地dns服务器，可以到域服务器上去
继续查找，并给出域服务器的地址，该过程叫做迭代过程。
本地dns向域服务器发送请求，这时候也不会直接返回域名和IP地址的对应关系，
而是返回本地DNS服务器域名的解析服务器的地址。本地DNS服务器向域名的解析服务器发出请求，
这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，
还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。
----------------------------------------------------------------------------------------
http请求
建立了TCP连接之后，发起一个http请求。请求的方法，例如 GET 或者 POST 等，
不常用的还有 PUT 和 DELETE 、HEAD、OPTION以及 TRACE 方法，
一般的浏览器只能发起 GET 或者 POST 请求。

建立连接(三次握手)―>传输数据-->断开连接（4次挥手）
三次握手：
第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认;

第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，
	即SYN+ACK包，此时服务器进入SYN_RECV状态;

第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，
	客户端和服务器进入ESTABLISHED状态，完成三次握手。

SYN：同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。
在客户机和服务器之间建立正常的TCP网络连接时，客户机首先发出一个SYN消息，服务器使用SYN+ACK应答表示接收到了这个消息，
最后客户机再以ACK消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。


四次挥手：----------------
第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：
	我已经不会再给你发数据了(当 然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，
	主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。

第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)。

第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，
不会再给你发数据了。

第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。



TCP四次挥手（客户端先发起情况）---------------
第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。

第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），
	Server进入CLOSE_WAIT状态。

第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。

第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，S
	erver进入CLOSED状态，完	成四次挥手。
-------------------------------------------------------------------------------------------------
发送请求：（http）
服务器处理请求;
　后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。

　　一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。
------------------------------------------------------------------------------------
服务器返回一个http响应
响应状态码：
1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。
2xx：成功状态码，表示服务器已成功接收到请求并进行处理。
3xx：重定向状态码，表示服务器要求客户端重定向。
4xx：客户端错误状态码，表示客户端的请求有非法内容。
	400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解
	404 Not Found 请求的资源不存在，例如，输入了错误的URL
5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。
	500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求
----------------------------------------------------------------

